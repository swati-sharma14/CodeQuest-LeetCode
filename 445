/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* prev= NULL;
        ListNode* curr= head;
        while (curr){
            ListNode* forward= curr->next;
            curr->next= prev;
            prev= curr;
            curr= forward;
        }
        return prev;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode* ans = new ListNode();
        int carry = 0;
        while(l1!=NULL && l2!=NULL){
            int c = l1->val + l2->val + carry;
            if(c>9){
                carry = 1;
                c-=10;
            }
            else{
                carry = 0;
            }
            ListNode* ptr = new ListNode(c);
            ptr->next = ans;
            ans = ptr;
            l1 = l1->next;
            l2 = l2->next;
        }
        cout << carry << endl;
        if(l1==NULL && l2!=NULL){
            while(l2!=NULL){
                int c = l2->val + carry;
                if(c>=10){
                    carry = 1;
                    c-=10;
                }
                else{
                    carry = 0;
                }
                ListNode* ptr = new ListNode(c);
                ptr->next = ans;
                ans = ptr;
                l2 = l2->next;
            }
        }
        else if(l2==NULL && l1!=NULL){
            while(l1!=NULL){
                int c = l1->val + carry;
                if(c>=10){
                    carry = 1;
                    c-=10;
                }
                else{
                    carry = 0;
                }
                ListNode* ptr = new ListNode(c);
                ptr->next = ans;
                ans = ptr;
                l1 = l1->next;
            }
        }
        if(carry==1){
            ListNode* ptr = new ListNode(1);
            ptr->next = ans;
            ans = ptr;
        }

        ListNode* ptr = ans;
        while(ptr->next->next!=NULL){
            ptr = ptr->next;
        }
        delete(ptr->next);
        ptr->next = NULL;
        return ans;
    }
};





